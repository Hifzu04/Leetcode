class Solution {
    int reach(int i  , int j , vector<vector<int>>& matrix , int n , int m ,vector<vector<int>>&dp){
        if(i>=n || j>=m) return 0;
        
        
        if(matrix[i][j] ==0) return 0;
          if(dp[i][j] != -1) return dp[i][j];
            int right = reach(i +1 , j , matrix , n , m ,dp);
            int down = reach(i , j+1 , matrix , n , m,dp);
            int dig = reach(i+1 ,j+1 , matrix , n , m,dp);
            return  dp[i][j] =1 + min({right, down , dig});
         
    }
public:
    int countSquares(vector<vector<int>>& matrix) {
        int n = matrix.size();
        int m = matrix[0].size();
        int ans= 0;
        vector<vector<int>>dp(n ,vector<int>(m,-1));
        for(int i = 0 ; i< n ; i++){
            for(int j = 0 ; j< m ; j++){
                if(matrix[i][j] ==1){
                   ans+=  reach(i , j , matrix , n , m ,dp);
                }
            }
        }
        return ans; 

    }
};